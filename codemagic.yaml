workflows:
  ios-workflow:
    name: iOS Build and Deploy v1.0.0
    instance_type: mac_mini_m1
    max_build_duration: 60
    environment:
      xcode: 15.0.1
      node: 20
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        APP_VERSION: "1.0.0"
        BUNDLE_ID: "tech.erconsulting.cinemind.app"
        DEVELOPMENT_TEAM: "WJMVGC7L35"
      groups:
        - app_store_credentials
      ios_signing:
        distribution_type: app_store
        bundle_identifier: tech.erconsulting.cinemind.app
    scripts:
      - name: Check Node.js version
        script: |
          echo "Node.js version:"
          node --version
          echo "Required: >=20.0.0"
          
      - name: Install dependencies
        script: |
          npm ci
          
      - name: Build web assets
        script: |
          npm run build
          
      - name: Sync Capacitor
        script: |
          npx cap sync ios
          
      - name: Install CocoaPods dependencies
        script: |
          cd ios/App
          pod install --repo-update
          cd ../..
          
      - name: Configure automatic signing
        script: |
          # Switch to automatic signing using more robust approach
          cd ios/App
          
          # Update project.pbxproj file
          sed -i '' 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' App.xcodeproj/project.pbxproj
          sed -i '' 's/ProvisioningStyle = Manual;/ProvisioningStyle = Automatic;/g' App.xcodeproj/project.pbxproj
          sed -i '' 's/CODE_SIGN_STYLE = "Manual";/CODE_SIGN_STYLE = Automatic;/g' App.xcodeproj/project.pbxproj
          sed -i '' 's/ProvisioningStyle = "Manual";/ProvisioningStyle = Automatic;/g' App.xcodeproj/project.pbxproj
          
          # Set development team
          sed -i '' "s/DEVELOPMENT_TEAM = .*/DEVELOPMENT_TEAM = $DEVELOPMENT_TEAM;/g" App.xcodeproj/project.pbxproj
          sed -i '' "s/DEVELOPMENT_TEAM = \".*\"/DEVELOPMENT_TEAM = $DEVELOPMENT_TEAM;/g" App.xcodeproj/project.pbxproj
          
          # Verify changes
          echo "=== Checking CODE_SIGN_STYLE ==="
          grep -n "CODE_SIGN_STYLE" App.xcodeproj/project.pbxproj || echo "No CODE_SIGN_STYLE found"
          
          echo "=== Checking DEVELOPMENT_TEAM ==="
          grep -n "DEVELOPMENT_TEAM" App.xcodeproj/project.pbxproj || echo "No DEVELOPMENT_TEAM found"
          
          cd ../..
          echo "✓ Switched to automatic signing"
          
      - name: Set up provisioning profiles
        script: |
          echo "=== Setting up provisioning profiles ==="
          xcode-project use-profiles
          
          # List available provisioning profiles
          echo "=== Available Provisioning Profiles ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || echo "No profiles in default location"
          
          # Check what profiles are available
          find ~/Library -name "*.mobileprovision" -exec basename {} \; 2>/dev/null || echo "No profiles found"
          
          echo "✓ Provisioning profiles setup completed"
          
      - name: Build iOS app
        script: |
          # Create export options plist with provisioning profile
          cat > "$HOME/export_options.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>CineMind App Store distribution</string>
              </dict>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
              <key>teamID</key>
              <string>$DEVELOPMENT_TEAM</string>
          </dict>
          </plist>
          EOF
          
          # Try xcode-project first, fallback to xcodebuild if it fails
          echo "=== Attempting xcode-project build-ipa ==="
          if xcode-project build-ipa \
            --workspace "$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME" \
            --export-options-plist "$HOME/export_options.plist" \
            --development-team "$DEVELOPMENT_TEAM"; then
            echo "✓ xcode-project build successful"
          else
            echo "⚠️ xcode-project failed, trying xcodebuild..."
            
            # Fallback to xcodebuild with manual signing using correct profile name
            xcodebuild \
              -workspace "$XCODE_WORKSPACE" \
              -scheme "$XCODE_SCHEME" \
              -configuration Release \
              -archivePath "$HOME/Library/Developer/Xcode/Archives/App.xcarchive" \
              archive \
              CODE_SIGN_STYLE=Manual \
              DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
              PROVISIONING_PROFILE_SPECIFIER="CineMind App Store distribution" \
              CODE_SIGN_IDENTITY="Apple Distribution"
            
            # Export IPA
            xcodebuild \
              -exportArchive \
              -archivePath "$HOME/Library/Developer/Xcode/Archives/App.xcarchive" \
              -exportPath "$CM_BUILD_DIR/ios" \
              -exportOptionsPlist "$HOME/export_options.plist"
          fi
          
    artifacts:
      - ios/*.ipa
      - ios/*.dSYM.zip
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      
    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_ID
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        beta_groups:
          - testers
      email:
        recipients:
          - your-email@example.com
        notify:
          success: true
          failure: true
