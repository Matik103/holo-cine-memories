workflows:
  ios-workflow:
    name: iOS Build and Deploy v1.0.0
    instance_type: mac_mini_m1
    max_build_duration: 60
    environment:
      xcode: 15.0.1
      node: 20
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        APP_VERSION: "1.0.0"
        BUNDLE_ID: "tech.cinemind.app"
        # Ensure the provisioning profile is available
        PROVISIONING_PROFILE: "CineMind App Distribution"
      groups:
        - app_store_credentials
    scripts:
      - name: Check Node.js version
        script: |
          echo "Node.js version:"
          node --version
          echo "Required: >=20.0.0"
          
      - name: Install dependencies
        script: |
          npm ci
          
      - name: Build web assets
        script: |
          npm run build
          
      - name: Sync Capacitor
        script: |
          npx cap sync ios
          
          # Ensure assets are properly copied
          echo "=== Verifying Capacitor Sync ==="
          if [ -d "ios/App/App/Assets.xcassets" ]; then
            echo "✓ Assets directory exists after sync"
            ls -la ios/App/App/Assets.xcassets/
          else
            echo "⚠️ Assets directory missing after sync"
          fi
          
      - name: Install CocoaPods dependencies
        script: |
          cd ios/App
          
          # Create empty Podfile.lock if it doesn't exist
          if [ ! -f Podfile.lock ]; then
            touch Podfile.lock
          fi
          
          # Workaround for static frameworks
          echo "use_frameworks! :linkage => :static" > Podfile.tmp
          cat Podfile >> Podfile.tmp
          mv Podfile.tmp Podfile
          
          # Install pods with verbose output
          pod install --verbose --repo-update
          
          cd ../..
          
      - name: Verify iOS Assets
        script: |
          echo "=== Verifying iOS Assets ==="
          
          # Check if asset directories exist
          if [ -d "ios/App/App/Assets.xcassets/AppIcon.appiconset" ]; then
            echo "✓ AppIcon directory exists"
            ls -la ios/App/App/Assets.xcassets/AppIcon.appiconset/
          else
            echo "⚠️ AppIcon directory not found"
          fi
          
          if [ -d "ios/App/App/Assets.xcassets/Splash.imageset" ]; then
            echo "✓ Splash imageset exists"
            ls -la ios/App/App/Assets.xcassets/Splash.imageset/
          else
            echo "⚠️ Splash imageset not found"
          fi
          
          # Verify Contents.json files exist
          if [ -f "ios/App/App/Assets.xcassets/AppIcon.appiconset/Contents.json" ]; then
            echo "✓ AppIcon Contents.json exists"
          else
            echo "⚠️ AppIcon Contents.json missing"
          fi
          
          echo "=== iOS Assets verification completed ==="
          
      - name: Set up code signing settings
        script: |
          echo "=== Code Signing Setup ==="
          
          # Let CodeMagic handle the provisioning profile automatically
          # This is the standard approach - CodeMagic should detect and use uploaded profiles
          xcode-project use-profiles
          
          echo "✓ Code signing configuration completed"
          
      - name: Configure iOS project for automatic signing
        script: |
          cd ios/App
          
          echo "=== Configuring Automatic Code Signing ==="
          # Let CodeMagic handle all signing automatically
          # This is the recommended approach for CodeMagic
          xcodebuild -project App.xcodeproj \
            -target App \
            -configuration Release \
            CODE_SIGN_STYLE=Automatic \
            PRODUCT_BUNDLE_IDENTIFIER="tech.cinemind.app"
          
          echo "✓ Automatic code signing configured"
          cd ../..
          
      - name: Verify CocoaPods installation
        script: |
          cd ios/App
          pod --version
          if [ -d "Pods" ]; then
            echo "✓ Pods directory exists"
            ls -la Pods/
          else
            echo "✗ Pods directory not found"
            exit 1
          fi
          cd ../..
          
      - name: Build IPA
        script: |
          cd ios/App
          
          echo "=== Verifying Workspace ==="
          if [ ! -f "App.xcworkspace/contents.xcworkspacedata" ]; then
            echo "❌ Workspace contents file missing!"
            exit 1
          fi
          echo "✓ Workspace verified"
          
          echo "=== Building with Automatic Code Signing ==="
          # Use automatic signing - CodeMagic will handle provisioning profiles
          xcodebuild \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -archivePath "$HOME/Library/Developer/Xcode/Archives/App.xcarchive" \
            archive \
            ENABLE_USER_SCRIPT_SANDBOXING=NO \
            CODE_SIGN_STYLE=Automatic \
            PRODUCT_BUNDLE_IDENTIFIER="tech.cinemind.app" \
            DEVELOPMENT_TEAM="" \
            CODE_SIGN_IDENTITY=""
          
          # Create export options for automatic signing
          echo "Creating export options for automatic signing"
          cat > "$HOME/export_options.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
          </dict>
          </plist>
          EOF
          
          # Export the archive
          xcodebuild \
            -exportArchive \
            -archivePath "$HOME/Library/Developer/Xcode/Archives/App.xcarchive" \
            -exportPath "$CM_BUILD_DIR/ios" \
            -exportOptionsPlist "$HOME/export_options.plist"
          
          echo "✓ Archive exported successfully with automatic signing"
          
          cd ../..
          
    artifacts:
      - ios/*.ipa
      - ios/*.dSYM.zip
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      
    publishing:
      # Development build - no App Store Connect upload needed
      email:
        recipients:
          - your-email@example.com
        notify:
          success: true
          failure: true

  android-workflow:
    name: Android Build and Deploy v1.0.0
    instance_type: linux_x2
    max_build_duration: 60
    environment:
      java: 17
      node: 20
      vars:
        APP_VERSION: "1.0.0"
        BUNDLE_ID: "tech.cinemind.app"
      groups:
        - google_play_credentials
    scripts:
      - name: Check Node.js version
        script: |
          echo "Node.js version:"
          node --version
          echo "Required: >=20.0.0"
          
      - name: Install dependencies
        script: |
          npm ci
          
      - name: Build web assets
        script: |
          npm run build
          
      - name: Sync Capacitor
        script: |
          npx cap sync android
          
      - name: Set up keystore
        script: |
          echo $KEYSTORE | base64 --decode > $CM_BUILD_DIR/keystore.jks
          
      - name: Build Android App Bundle
        script: |
          cd android
          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=$CM_BUILD_DIR/keystore.jks \
            -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$KEY_PASSWORD
          cd ..
          
    artifacts:
      - android/app/build/outputs/**/*.aab
      - android/app/build/outputs/**/*.apk
      
    publishing:
      google_play:
        credentials: $GOOGLE_PLAY_SERVICE_ACCOUNT
        track: internal
      email:
        recipients:
          - your-email@example.com
        notify:
          success: true
          failure: true