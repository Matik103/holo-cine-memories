workflows:
  ios-workflow:
    name: iOS Build and Deploy v1.0.0
    instance_type: mac_mini_m1
    max_build_duration: 60
    environment:
      xcode: 15.0.1
      node: 20
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        APP_VERSION: "1.0.0"
        BUNDLE_ID: "tech.cinemind"
        PROVISIONING_PROFILE: "CineMind App Store distribution"
      groups:
        - app_store_credentials
    scripts:
      - name: Check Node.js version
        script: |
          echo "Node.js version:"
          node --version
          echo "Required: >=20.0.0"
          
      - name: Install dependencies
        script: |
          npm ci
          
      - name: Build web assets
        script: |
          npm run build
          
      - name: Sync Capacitor
        script: |
          npx cap sync ios
          
          # Ensure assets are properly copied
          echo "=== Verifying Capacitor Sync ==="
          if [ -d "ios/App/App/Assets.xcassets" ]; then
            echo "✓ Assets directory exists after sync"
            ls -la ios/App/App/Assets.xcassets/
          else
            echo "⚠️ Assets directory missing after sync"
          fi
          
      - name: Install CocoaPods dependencies
        script: |
          cd ios/App
          
          # Create empty Podfile.lock if it doesn't exist
          if [ ! -f Podfile.lock ]; then
            touch Podfile.lock
          fi
          
          # Workaround for static frameworks
          echo "use_frameworks! :linkage => :static" > Podfile.tmp
          cat Podfile >> Podfile.tmp
          mv Podfile.tmp Podfile
          
          # Install pods with verbose output
          pod install --verbose --repo-update
          
          cd ../..
          
      - name: Verify iOS Assets
        script: |
          echo "=== Verifying iOS Assets ==="
          
          # Check if asset directories exist
          if [ -d "ios/App/App/Assets.xcassets/AppIcon.appiconset" ]; then
            echo "✓ AppIcon directory exists"
            ls -la ios/App/App/Assets.xcassets/AppIcon.appiconset/
          else
            echo "⚠️ AppIcon directory not found"
          fi
          
          if [ -d "ios/App/App/Assets.xcassets/Splash.imageset" ]; then
            echo "✓ Splash imageset exists"
            ls -la ios/App/App/Assets.xcassets/Splash.imageset/
          else
            echo "⚠️ Splash imageset not found"
          fi
          
          # Verify Contents.json files exist
          if [ -f "ios/App/App/Assets.xcassets/AppIcon.appiconset/Contents.json" ]; then
            echo "✓ AppIcon Contents.json exists"
          else
            echo "⚠️ AppIcon Contents.json missing"
          fi
          
          echo "=== iOS Assets verification completed ==="
          
      - name: Set up code signing settings
        script: |
          echo "=== Code Signing Setup ==="
          
          # Force CodeMagic to download and install profiles
          xcode-project use-profiles
          
          # Wait a moment for profiles to be installed
          sleep 5
          
          # Debug: List available profiles
          echo "=== Available Provisioning Profiles ==="
          ls -la /Users/builder/Library/MobileDevice/Provisioning\ Profiles/ || echo "No profiles in default location"
          
          # Check CodeMagic's profile directory
          echo "=== CodeMagic Profile Directory ==="
          find /Users/builder -name "*.mobileprovision" -o -name "*.provisionprofile" 2>/dev/null || echo "No profiles found"
          
          # Check if our specific profile is available
          if [ -f "/Users/builder/Library/MobileDevice/Provisioning Profiles/CineMind App Distribution.mobileprovision" ]; then
            echo "✓ Found CineMind App Distribution profile"
          else
            echo "⚠️ CineMind App Distribution profile not found in expected location"
            echo "This means CodeMagic needs to properly download/install the profile"
            
            # Try to find the profile in other locations
            echo "=== Searching for CineMind profile ==="
            find /Users/builder -name "*CineMind*" -type f 2>/dev/null || echo "No CineMind files found"
            
            # List all available profiles for debugging
            echo "=== All available profiles ==="
            find /Users/builder -name "*.mobileprovision" -exec basename {} \; 2>/dev/null || echo "No profiles found"
          fi
          
          echo "✓ Code signing configuration completed"
          
      - name: Set up code signing settings
        script: |
          echo "=== Code Signing Setup ==="
          
          # Force CodeMagic to download and install profiles
          xcode-project use-profiles
          
          # Wait for profiles to be processed
          sleep 15
          
          # Debug: Check what profiles are available
          echo "=== Available Provisioning Profiles ==="
          ls -la /Users/builder/Library/MobileDevice/Provisioning\ Profiles/ || echo "No profiles in default location"
          
          # Check CodeMagic's profile directory
          echo "=== CodeMagic Profile Directory ==="
          find /Users/builder -name "*.mobileprovision" -o -name "*.provisionprofile" 2>/dev/null || echo "No profiles found"
          
          # List all profiles with details
          echo "=== Profile Details ==="
          find /Users/builder -name "*.mobileprovision" -exec security cms -D -i {} \; 2>/dev/null | grep -E "(Name|ApplicationIdentifier)" || echo "Could not read profile details"
          
          # Check specifically for our profile
          echo "=== Looking for CineMind App Store distribution ==="
          find /Users/builder -name "*CineMind*" -type f 2>/dev/null || echo "CineMind profile not found"
          
          # Try to manually install profile if found elsewhere
          echo "=== Attempting manual profile installation ==="
          find /Users/builder -name "*CineMind*" -name "*.mobileprovision" -exec cp {} /Users/builder/Library/MobileDevice/Provisioning\ Profiles/ \; 2>/dev/null || echo "No CineMind profile found to copy"
          
          echo "✓ Code signing configuration completed"
          
      - name: Verify CocoaPods installation
        script: |
          cd ios/App
          pod --version
          if [ -d "Pods" ]; then
            echo "✓ Pods directory exists"
            ls -la Pods/
          else
            echo "✗ Pods directory not found"
            exit 1
          fi
          cd ../..
          
      - name: Build IPA
        script: |
          # Disable User Script Sandboxing for compatibility
          xcodebuild \
            -workspace "ios/App/App.xcworkspace" \
            -scheme "App" \
            -configuration Release \
            -archivePath "$HOME/Library/Developer/Xcode/Archives/App.xcarchive" \
            archive \
            ENABLE_USER_SCRIPT_SANDBOXING=NO \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE" \
            DEVELOPMENT_TEAM="WJMVGC7L35"
          
          # Create export options for manual signing with specific profile
          cat > "$HOME/export_options.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>tech.cinemind</key>
                  <string>$PROVISIONING_PROFILE</string>
              </dict>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
          </dict>
          </plist>
          EOF
          
          xcodebuild \
            -exportArchive \
            -archivePath "$HOME/Library/Developer/Xcode/Archives/App.xcarchive" \
            -exportPath "$CM_BUILD_DIR/ios" \
            -exportOptionsPlist "$HOME/export_options.plist"
          
    artifacts:
      - ios/*.ipa
      - ios/*.dSYM.zip
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      
    publishing:
      # Development build - no App Store Connect upload needed
      email:
        recipients:
          - your-email@example.com
        notify:
          success: true
          failure: true

  android-workflow:
    name: Android Build and Deploy v1.0.0
    instance_type: linux_x2
    max_build_duration: 60
    environment:
      java: 17
      node: 20
      vars:
        APP_VERSION: "1.0.0"
        BUNDLE_ID: "tech.cinemind"
      groups:
        - google_play_credentials
    scripts:
      - name: Check Node.js version
        script: |
          echo "Node.js version:"
          node --version
          echo "Required: >=20.0.0"
          
      - name: Install dependencies
        script: |
          npm ci
          
      - name: Build web assets
        script: |
          npm run build
          
      - name: Sync Capacitor
        script: |
          npx cap sync android
          
      - name: Set up keystore
        script: |
          echo $KEYSTORE | base64 --decode > $CM_BUILD_DIR/keystore.jks
          
      - name: Build Android App Bundle
        script: |
          cd android
          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=$CM_BUILD_DIR/keystore.jks \
            -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$KEY_PASSWORD
          cd ..
          
    artifacts:
      - android/app/build/outputs/**/*.aab
      - android/app/build/outputs/**/*.apk
      
    publishing:
      google_play:
        credentials: $GOOGLE_PLAY_SERVICE_ACCOUNT
        track: internal
      email:
        recipients:
          - your-email@example.com
        notify:
          success: true
          failure: true