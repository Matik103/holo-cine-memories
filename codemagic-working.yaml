workflows:
  ios-workflow:
    name: iOS Build and Deploy v1.0.0
    instance_type: mac_mini_m1
    max_build_duration: 60
    environment:
      xcode: 15.0.1
      node: 20
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        APP_VERSION: "1.0.0"
        BUNDLE_ID: "tech.erconsulting.cinemind.app"
        DEVELOPMENT_TEAM: "WJMVGC7L35"
      groups:
        - app_store_credentials
        - ios_signing
    scripts:
      - name: Check Node.js version
        script: |
          echo "Node.js version:"
          node --version
          echo "Required: >=20.0.0"
          
      - name: Install dependencies
        script: |
          npm ci
          
      - name: Build web assets
        script: |
          npm run build
          
      - name: Sync Capacitor
        script: |
          npx cap sync ios
          
      - name: Install CocoaPods dependencies
        script: |
          cd ios/App
          pod install --repo-update
          cd ../..
          
      - name: Set up code signing
        script: |
          # Create keychain
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          
          # Import certificate
          echo "$CERTIFICATE_PRIVATE_KEY" | base64 --decode > /tmp/certificate.p12
          security import /tmp/certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          
          # Install provisioning profile
          echo "$PROVISIONING_PROFILE" | base64 --decode > /tmp/profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          
      - name: Build iOS app
        script: |
          xcodebuild \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -archivePath "$HOME/Library/Developer/Xcode/Archives/App.xcarchive" \
            archive \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE" \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM"
          
          # Create export options
          cat > "$HOME/export_options.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROVISIONING_PROFILE</string>
              </dict>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
              <key>teamID</key>
              <string>$DEVELOPMENT_TEAM</string>
          </dict>
          </plist>
          EOF
          
          # Export IPA
          xcodebuild \
            -exportArchive \
            -archivePath "$HOME/Library/Developer/Xcode/Archives/App.xcarchive" \
            -exportPath "$CM_BUILD_DIR/ios" \
            -exportOptionsPlist "$HOME/export_options.plist"
          
    artifacts:
      - ios/*.ipa
      - ios/*.dSYM.zip
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      
    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_ID
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        beta_groups:
          - testers
      email:
        recipients:
          - your-email@example.com
        notify:
          success: true
          failure: true

  android-workflow:
    name: Android Build and Deploy v1.0.0
    instance_type: linux_x2
    max_build_duration: 60
    environment:
      java: 17
      node: 20
      vars:
        APP_VERSION: "1.0.0"
        BUNDLE_ID: "tech.erconsulting.cinemind.app"
      groups:
        - google_play_credentials
    scripts:
      - name: Check Node.js version
        script: |
          echo "Node.js version:"
          node --version
          echo "Required: >=20.0.0"
          
      - name: Install dependencies
        script: |
          npm ci
          
      - name: Build web assets
        script: |
          npm run build
          
      - name: Sync Capacitor
        script: |
          npx cap sync android
          
      - name: Set up keystore
        script: |
          echo $KEYSTORE | base64 --decode > $CM_BUILD_DIR/keystore.jks
          
      - name: Build Android App Bundle
        script: |
          cd android
          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=$CM_BUILD_DIR/keystore.jks \
            -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$KEY_PASSWORD
          cd ..
          
    artifacts:
      - android/app/build/outputs/**/*.aab
      - android/app/build/outputs/**/*.apk
      
    publishing:
      google_play:
        credentials: $GOOGLE_PLAY_SERVICE_ACCOUNT
        track: internal
      email:
        recipients:
          - your-email@example.com
        notify:
          success: true
          failure: true
